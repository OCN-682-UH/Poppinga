---
title: "Week 07 Lectures"
author: "Haley Poppinga"
date: "October 7, 2025"
format: 
  html:
    toc: true
    theme: sandstone
---


## Week 7a Lecture  

[Lecture Slides](https://raw.githack.com/OCN-682-UH/Fall_2025/main/Week_07/13_Maps1.html)  

Outline of class:  
Working with Maps  

1. Quiz!  
2. Highlight some various spatial packages.  
3. Simple mapping using the {maps} package with ggplot.  

Homework: Make a map. 


### Introduction 

**Map Packages**  
There are a ton of different map packages.  


Other very helpful packages:  

* **sf** (This is for the serious GIS people. If you want to do actual spatial analyses this is the package to use)  
* **ggmap** (Uses the google maps API to make maps. Really easy to use, but requires a credit card for the API...)  
* **tmap** (static and interactive maps). 
* **leaflet** (interactive html maps-- Awesome to use with rmakrdown files)   

Helpful references:  

* The [Required Reading Wilke](https://clauswilke.com/dataviz/geospatial-data.html) and 
[Required Reading Healy](https://socviz.co/maps.html#maps) for today  
* [Advanced maps](https://r.geocompx.org/adv-map.html)  
* [Bathymetry example](https://ben-williams.github.io/updated_ggplot_figures.html#maps)  
* [Earth Lab](https://earthlab.colorado.edu/)  

Quiz: When using ggmap, never push a file with your API key to GitHub so that it is visible for everyone to see.




### Load Libraries  
```{r}
library(tidyverse)
library(here)
library(ggplot2)
library(ghibli) 
library(beepr)
library(kableExtra)
library(magick)
library(cowplot)
library(maps)
library(mapdata)
library(mapproj)
```


### Read Data
```{r}
# Read in data on population in California by county
popdata<-read_csv(here("Week_07","data","CApopdata.csv"))
#read in data on number of seastars at different field sites
stars<-read_csv(here("Week_07","data","stars.csv"))
```

##### {maps} package  
The {maps} package is a combination of functions that pair well with ggplot and base layers for maps (i.e. polygons of regions of interest).  
Baselayer = kinda like the background of map. You'll put stuff on top of it.  


map_data("location") is the function used to pull out whatever base layer that you want.  

```{r}
# get data for the entire world
world<-map_data("world")
head(world)
```

You can extract polygons for different _countries_.  
```{r}
# get data for the USA
usa<-map_data("usa")
head(usa)
```

```{r}
# get data for italy
italy<-map_data("italy")
head(italy)
```


You can also extract data and different resolutions. For example for data that also has polygons for each state in the US use:  

```{r}
# get data for states
states<-map_data("state")
head(states)
```

```{r}
# get data for counties
counties<-map_data("county")
head(counties)
```



**Structure of the data**  

* **long** is longitude. Things to the west of the prime meridian are negative.  
* **lat** is latitude.  
* **order**. This just shows in which order ggplot should “connect the dots”.  
* **region** and subregion tell what region or subregion a set of points surrounds. 
* **group**. This is very important! ggplot2’s functions can take a group argument which controls (amongst other things) whether adjacent points should be connected by lines. If they are in the same group, then they get connected, but if they are in different groups then they don’t. Essentially, having to points in different groups means that ggplot “lifts the pen” when going between them.  


**Make a map of the world**  

```{r}
# use world dataset
ggplot()+
  geom_polygon(data = world, aes(x = long, y = lat, group = group))
```

What happens if I forget group = group?  
```{r}
ggplot()+
  geom_polygon(data = world, aes(x = long, y = lat)) # no group = group
```

If I go to make a map and it looks like the image below, what did I forget to put in my code? 

aes(group = group)





Add color to the lines and fill.  
```{r}
ggplot()+
  geom_polygon(data = world, 
               aes(x = long, y = lat, group = group),
               color = "black") # add color to the lines
```

**Change the visuals** 

Add color and fill  
```{r}
ggplot()+
  geom_polygon(data = world, 
               aes(x = long, 
                   y = lat,
                   group = group,
                   fill = region), # fill in by region
               color = "black") + # add color to regions
  guides(fill = FALSE)
```


Change the theme  
```{r}
ggplot()+
  geom_polygon(data = world, 
               aes(x = long, 
                   y = lat,
                   group = group,
                   fill = region), # fill in by region
               color = "black")+ # add color to regions
  guides(fill = FALSE)+
  theme_minimal() + # add a theme, can choose any you want
  guides(fill = FALSE)+
  theme(panel.background = element_rect(fill = "lightblue")) # make the ocean blue

```



**Change the map projection**  
The earth is NOT flat, but we are attempting to visualize this map in 2D. There are a lot of different projections that you can use. See [here](https://rdrr.io/cran/mapproj/man/mapproject.html) for the different projections included in the {mapproj} package.  

Mercator Projection:  
```{r}
ggplot()+
  geom_polygon(data = world, 
               aes(x = long, 
                   y = lat,
                   group = group,
                   fill = region), # fill in by region
               color = "black")+ # add color to regions
  guides(fill = FALSE)+
  theme_minimal() +
  guides(fill = FALSE)+
  theme(panel.background = element_rect(fill = "lightblue")) + # make the ocean blue
  coord_map(projection = "mercator",
            xlim = c(-180,180)) # Use a mercator projection
```


Sinusoidal projection:  
```{r}
ggplot()+
  geom_polygon(data = world, 
               aes(x = long, 
                   y = lat,
                   group = group,
                   fill = region), # fill in by region
               color = "black")+ # add color to regions
  guides(fill = FALSE)+
  theme_minimal() +
  guides(fill = FALSE)+
  theme(panel.background = element_rect(fill = "lightblue")) + # make the ocean blue
  coord_map(projection = "sinusoidal",
            xlim = c(-180,180)) # use sinusoidal projection
# play around with the limits if you want to 
```

Quiz: What function do I use to change the projection of my map?
coord_map()







Extra:  
rnaturalearth package for some more advanced plotting with the sf package. Check it out [here](https://github.com/ropensci/rnaturalearth).  


**Let's make a map of just California**.  
```{r}
# Use the states dataset
head(states)
CA_data<-states %>%
  filter(region == "california") # Filter out just the California data.
```


**Think, pair, share**.  
Make a simple map of just California using what you just learned. Do not cheat!!   
```{r}
CA_plot<- ggplot()+
  geom_polygon(data = CA_data, 
               aes(x = long, 
                   y = lat,
                   group = group,
                   fill = region), # fill in by region
               fill = "#E35335", # hex color (can look up colors put #hex#), outside of aesthetic since its not a part of the data
               color = "black")+ # add color to regions
  guides(fill = FALSE)
ggdraw() + # trying to practice add an image to the plot using cowplot and magick
  draw_image("https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Flag_of_California.svg/2560px-Flag_of_California.svg.png")+
  draw_plot(CA_plot)
```


**Map of California**  
```{r}
ggplot()+
geom_polygon(data = CA_data, 
             aes(x = long, 
                 y = lat, 
                 group = group), 
             color = "black")+
  coord_map()+
  theme_void() # gets rid of gridlines and such
```


**Adding multiple layers of data**   
Plot the population of every county in California.  

First, we need to get the county level data and join it with our dataset on population (How do I do it?)  

```{r}
# Look at the county data
head(counties)[1:3,] # only showing the first 3 rows for space
```
```{r}
head(popdata)
```


Need to combine the data but have to rename the columns so they have the same name.  
Wrangle the data. Make the column names the same to join the two datasets.  
```{r}
CApop_county<-popdata %>%
  select("subregion" = County, Population)  %>% # rename the county col
  inner_join(counties) %>%
  filter(region == "california") # some counties have same names in other states
```


```{r}
head(CApop_county)
```


**Map of CA population by county**  
```{r}
ggplot()+
geom_polygon(data = CApop_county, 
             aes(x = long, 
                 y = lat, 
                 group = group,
                 fill = Population),
             color = "black")+
  coord_map()+
  theme_void() +
   scale_fill_gradient(trans = "log10") # Make it log scale for easier interpretation. See differences better
```


**Add a layer of points**  
Look at the stars dataset. This has the number of seastars per/m2 at different sites in California.  
```{r}
head(stars) # stars dataset = number of seastars in CA
```


**Map of CA population by county with seastars**  
Add a geom_point layer.  

```{r}
ggplot()+
geom_polygon(data = CApop_county, 
             aes(x = long, 
                 y = lat, 
                 group = group,
                 fill = Population),  
             color = "black",)+
  geom_point(data = stars, # add a point at all my sites using stars dataset
             aes(x = long,
                 y = lat,
                 size = star_no))+ # Make points proportional to number of stars.
  coord_map()+
  theme_void() +
  scale_fill_gradient(trans = "log10") +
   labs(size = "# stars/m2", # Make a better legend label (was: column title "star_no"), use size = because its the title for the size
        fill = "Population") # rename label for legend if needed

# ggsave(here("Week_07","Output","CApop.pdf")) # save it
```

**Total Awesome R package**.  
```{r}
library(ggdogs)
ggplot(mtcars) +
  geom_dog(aes(mpg, wt), dog = "pug", size = 5)
```



________________________________________________________________________________


## Week 7b Lecture  

[Lecture Slides](https://raw.githack.com/OCN-682-UH/Fall_2025/main/Week_07/14_Maps2.html#1)

### Introduction  

Outline:  
Working with Maps part 2. 
{ggmaps}


* [ggmap article](http://stat405.had.co.nz/ggmap.pdf)  
* [Making plots with ggmap](https://www.littlemissdata.com/blog/maps).  
* [Setting up ggmap](https://builtin.com/data-science/ggmap).  

**Review**  
If my plot looks like a bunch of crazy lines, what did I likely forget to put in the ggplot code?  
group = group


### Load Libraries 

```{r}
library(tidyverse)
library(here)
library(ggplot2)
library(ggspatial)
library(ggmap)
```
Install ggmaps and ggsn  
* ggspatial: adds scale bars and compass arrows  

Google Static Map:  
Code for installing google maps:   
register_google(key = "your key here", write = TRUE) ### use your own api  

* IMPORTANT don't put your key to github!! I usually save mine in a text file and import it each time (need to reload it if update R or new computer)  
* Setting write = TRUE will write the API key to your R environment so that you do not have to re register it each time  
* Google is proprietary that is why we need a cc


Stadia Maps:  
[Link](https://client.stadiamaps.com/dashboard/#/overview) to Stadia Maps Website  
Code for installing stadia maps with API:  
Also use the stadia maps API Key  
register_stadiamaps("Your key here", write = TRUE)  



### Read Data 

```{r}
ChemData<-read_csv(here("Week_07","data","chemicaldata_maunalua.csv"))
glimpse(ChemData)
```
We will use a snapshot of the Maunalua Chemistry data in this weeks data folder  


**Get base maps from ggmap**  
get_map() is the function to get a basemap from Google Maps. At it's simplest form, you only need to put in a location.  
For example, get a map from Oahu. Just gets coordinate information from ggmap doesn't plot it.

Location as a string:  
```{r}
Oahu<-get_map("Oahu")
```

Use ggmap to plot the base layer  
Put get_map into ggmap.  
```{r}
ggmap(Oahu)
```

You can also put in latitude and longitude coordinates to get a basemap.  

Get coordinates for Wailupe on Oahu.  
```{r}
#Make a data frame of lon and lat coordinates
WP<-data.frame(lon = -157.7621, lat = 21.27427) # coordinates for Wailupe

# Get base layer
Map1<-get_map(WP) # Wailupe in Maunalua now the center of map

# plot it
ggmap(Map1)
```

_Zoom in on a location_  
The zoom argument, an integer from 3 to 20 specifying how large the spatial extent should be around the center, with 3 being the continent level and 20 being roughly the single building level.  

* 3 is really **zoomed out** like Pacific Ocean  
* 20 is really **zoomed IN** would be like a single building  
```{r}
Map1<-get_map(WP,zoom = 17) # zoomed in around study site
ggmap(Map1)
```


_Change the map type_  
There are lots of different ones. look at ?get_map  
* some through Google and some through Stadia
```{r}
Map1<-get_map(WP,zoom = 17, maptype = "satellite") # converts map type into anything
ggmap(Map1)
```


Through Stadia:  

* more artisitc  
* different map types  
```{r}
Map1<-get_map(WP,zoom = 17, maptype = "stamen_watercolor", source = "stadia")
ggmap(Map1)
```

**You can use the ggmap base layer in any ggplot**  
Plot salinity values of each sampling point along site:  
```{r}
Map1<-get_map(WP,zoom = 17, maptype = "satellite") 
ggmap(Map1)+
  geom_point(data = ChemData, # pull in chem data
             aes(x = Long, y = Lat, color = Salinity), # column of long and lat
             size = 4) +
  scale_color_viridis_c() 
```
Site has a lot of groundwater. More saline water away from shore.  
Uses a regular ggplot. Can change everything (points, colors, x and y labels) just like regular ggplot. Can make good figures on top of a layer that zooms in on study site.  


**Add a Scale Bar**  

* use ?annotation_scale and ?annotation_north_arrow to see what other things you can change about the plot  
* coord_sf important for using scale bar. Have to tell R what coordinate system you are using and that it is a map.  
* crs is for coordinate system and #### is for GIS classic coordinate system that most GPS is in. Depends on GPS you use. Scale bar will be wrong is you forget this.  
```{r}
ggmap(Map1) + 
  geom_point(data = ChemData,
             aes(x = Long, y = Lat, color = Salinity),
             size = 4) +
  scale_color_viridis_c() +
  annotation_scale(bar_cols = c("yellow", "blue"),
                   location = "bl") + # put the bar on the bottom left and make the colors yellow and white
  annotation_north_arrow(location = "tl") + # add a north arrow, decide whether its grid north or true north
  coord_sf(crs = 4326) # for the scale bar to work it needs to be in this coordinate system - this is a typical coordinate reference system for a GPS (WGS84)
```



**Don't know the exact lat and long?**  
Use geocode() to get exact locations that you can then use in the maps.  
Get lat and long from Google. If don't know locaiton of something for getmap it can be very helpful.  
```{r}
geocode("the white house")
```

```{r}
geocode("University of Hawaii at Manoa")
```


**Totally awesome R Package**  
emojifont!

```{r}
library(emojifont)
search_emoji('smile')
```

Use an emoji instead of a point.  
```{r}
ggplot() + 
  geom_emoji('smile_cat', 
             x=1:5, y=1:5, 
             size=10)
```








